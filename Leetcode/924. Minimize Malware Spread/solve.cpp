#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>
using namespace std;

void dfs(int node, vector<vector<int>> &graph, vector<bool> &visited, vector<int> &component)
{
    visited[node] = true;
    component.push_back(node);
    for (int neighbor = 0; neighbor < graph.size(); neighbor++)
    {
        if (graph[node][neighbor] == 1 && !visited[neighbor])
        {
            dfs(neighbor, graph, visited, component);
        }
    }
}

int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
{
    int n = graph.size();
    vector<bool> visited(n, false);
    vector<vector<int>> components;
    unordered_map<int, int> nodeToComponent;

    for (int i = 0; i < n; i++)
    {
        if (!visited[i])
        {
            vector<int> component;
            dfs(i, graph, visited, component);
            for (int node : component)
            {
                nodeToComponent[node] = components.size();
            }
            components.push_back(component);
        }
    }

    vector<int> malwareCount(components.size(), 0);
    for (int node : initial)
    {
        malwareCount[nodeToComponent[node]]++;
    }

    sort(initial.begin(), initial.end()); 
    int bestNode = initial[0];
    int maxSaved = -1;

    for (int node : initial)
    {
        int componentIndex = nodeToComponent[node];
        if (malwareCount[componentIndex] == 1)
        { 
            int saved = components[componentIndex].size();
            if (saved > maxSaved || (saved == maxSaved && node < bestNode))
            {
                bestNode = node;
                maxSaved = saved;
            }
        }
    }

    return bestNode;
}

int main()
{
    vector<vector<int>> graph = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};
    vector<int> initial = {1, 2};
    cout << minMalwareSpread(graph, initial) << endl;
    return 0;
}